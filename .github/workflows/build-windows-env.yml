name: build env Windows

permissions:
  contents: read
#based on     krita/build-tools/ci-scripts/windows.yml
on:
  workflow_dispatch:  # Triger manual
jobs:
  build-env-windows:
    runs-on: windows-latest
    timeout-minutes: 90
    env:
      KDECI_BUILD_TYPE: Release
      KDECI_CC_CACHE: ${{ github.workspace }}\cache-krita-windows-cc 
      KDECI_CACHE_PATH: ${{ github.workspace }}\cache-krita-windows-artifacts-cc
      KDECI_GITLAB_SERVER: https://invent.kde.org/
      KDECI_PACKAGE_PROJECT: teams/ci-artifacts/krita-windows
      KDECI_REPO_METADATA_PATH: ${{ github.workspace }}\krita-deps-management\repo-metadata
      KDECI_COMPRESS_PACKAGES_ON_DOWNLOAD: False
      KDECI_EXTRA_CMAKE_ARGS: -DHIDE_SAFE_ASSERTS=OFF
      KRITACI_SKIP_DEBUG_PACKAGE: True
      KRITACI_BUILD_INSTALLERS: False
      KRITACI_SKIP_UPLOAD_NIGHTLY_PACKAGE: True
      KRITACI_WINDOWS_SIGN_CONFIG: upstream-ci-utilities/signing/signwindowsbinaries.ini
      KRITACI_PUBLISH_BUILD_CONFIG: upstream-ci-utilities/signing/publishbuild.ini
      EFFECTIVE_DEPS_REPO_BRANCH_NAME: "master" 
      EFFECTIVE_DEPS_BRANCH_NAME: "master"
      CI_PROJECT_DIR: ${{ github.workspace }}
      CI_PROJECT_NAME: ${{ github.repository }}
      CI_COMMIT_REF_NAME: ${{ github.ref_name }}
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          # deactivates persist of GitHub-Token in git-conf
          persist-credentials: false
          
      - name: List current directory files
        run: dir
        shell: pwsh

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          #CacheTypes:
          #For pip, the action will cache the global cache directory
          #For pipenv, the action will cache virtualenv directory
          #For poetry, the action will cache virtualenv directories -- one for each poetry project found
          cache: 'pip'

          # Save the CC cache even if previous steps fail
      - name: Save CC cache
        if: always()
        uses: actions/cache@v3
        with:
          path: ${{ env.KDECI_CC_CACHE }}
          key: ${{ runner.os }}-krita-windows-cc-test }}

      # Save the Artifacts cache even if previous steps fail
      - name: Save Artifacts cache
        if: always()
        uses: actions/cache@v3
        with:
          path: ${{ env.KDECI_CACHE_PATH }}
          key: ${{ runner.os }}-krita-windows-artifacts-test }}
          
      #- name: Cache Chocolatey packages
      #  uses: actions/cache@v3
      #  with:
      #    path: C:/ProgramData/Chocolatey
      #    key: chocolatey-${{ runner.os }}-ninja-ccache }}
      #    restore-keys: |
      #      chocolatey-${{ runner.os }}-
            
      #- name: Install Ninja Build System
      #  run: choco install ninja -y
      #  shell: pwsh
        
      - name: Install ccache
        run: choco install ccache -y
        shell: pwsh
        
      # A newer version of cmake.install is usually on github alredy installed.
      #- name: Install CMake 3.21.0
      #  run: choco install cmake --version=3.21.0 -y
      #  shell: pwsh
      
      #- name: Install Boost
      #  run: |
      #    # Latest version Info on https://www.boost.org/releases/latest/
      #    # load Boost
      #    Invoke-WebRequest -Uri "https://github.com/boostorg/boost/releases/download/boost-1.88.0/boost-1.88.0-cmake.zip" -OutFile libBoost.zip
      #    # Extract to C:\tools\libBoost
      #    Expand-Archive libBoost.zip -DestinationPath C:\tools\libBoost -Force
      #    # Add Toolchain to PATH envirment variable
      #    Add-Content -Path $env:BOOST_ROOT -Value "C:\tools\libBoost\tools\boost"
      #  shell: pwsh
      
      #- name: Create vcpkg manifest file
      #  run: |
      #    Write-Host "Creating vcpkg manifest file..."
      #    @"
      #    {
      #      "name": "krita",
      #      "dependencies": [
      #        { "name": "boost", "version>=": "1.65.0" }
      #      ]
      #    }
      #    "@ | Set-Content -Encoding UTF8 vcpkg.json
      #  shell: pwsh
      - name: List current directory files in C:/vcpkg/
        run: dir C:/vcpkg/
        shell: pwsh


      - name: Cache vcpkg installed
        uses: actions/cache@v3
        with:
          path: cache-vcpkg-installed
          key: vcpkg-installed-${{ runner.os }}-test }}
          restore-keys: |
            vcpkg-installed-${{ runner.os }}-

      - name: Create installed directory for vcpkg and Symlink vcpkg installed folder to it
        shell: pwsh
        run: |
          if (!(Test-Path -Path "cache-vcpkg-installed")) {
              New-Item -ItemType Directory -Force -Path "cache-vcpkg-installed" | Out-Null
              Write-Host "Directory 'cache-vcpkg-installed' created"
          } else {
              Write-Host "Directory 'cache-vcpkg-installed' used from cache"
          }
          # creates symlink for vcpkg installed
          New-Item -ItemType SymbolicLink -Path "C:\vcpkg\installed" -Target "$env:GITHUB_WORKSPACE\cache-vcpkg-installed" 
            
          
      - name: Cache vcpkg binaries
        uses: actions/cache@v3
        with:
          path: cache-vcpkg-bin-source
          key: vcpkg-vcpkgbinsource-${{ runner.os }}-test }}
          restore-keys: |
            vcpkg-vcpkgbinsource-${{ runner.os }}-

      - name: Create cache directory for vcpkg binary sources
        shell: pwsh
        run: |
          if (!(Test-Path -Path "cache-vcpkg-bin-source")) {
              New-Item -ItemType Directory -Force -Path "cache-vcpkg-bin-source" | Out-Null
              Write-Host "Directory 'cache-vcpkg-bin-source' created"
          } else {
              Write-Host "Directory 'cache-vcpkg-bin-source' used from cache"
          }
          
      - name: Set VCPKG_BINARY_SOURCES
        run: |
         echo "VCPKG_BINARY_SOURCES=clear;files,$env:GITHUB_WORKSPACE\cache-vcpkg-bin-source,readwrite"
         echo "VCPKG_BINARY_SOURCES=clear;files,$env:GITHUB_WORKSPACE\cache-vcpkg-bin-source,readwrite" >> $env:GITHUB_ENV
        shell: pwsh
        
      - name: vcpkg list 
        run: vcpkg list 
        shell: pwsh

      - name: Cache vcpkg downloads
        uses: actions/cache@v3
        with:
          path: cache-vcpkg-downloads
          key: vcpkg-downloads-${{ runner.os }}-test }}
          restore-keys: |
            vcpkg-downloads-${{ runner.os }}-
            
      - name: Create downloads directory for vcpkg and Symlink vcpkg Downloads to it
        shell: pwsh
        run: |
          if (!(Test-Path -Path "cache-vcpkg-downloads")) {
              New-Item -ItemType Directory -Force -Path "cache-vcpkg-downloads" | Out-Null
              Write-Host "Directory 'cache-vcpkg-downloads' created"
          } else {
              Write-Host "Directory 'cache-vcpkg-downloads' used from cache"
          }
          # creates symlink for vcpkg downloads
          New-Item -ItemType SymbolicLink -Path "C:\vcpkg\downloads" -Target "$env:GITHUB_WORKSPACE\cache-vcpkg-downloads" 
          Write-Host "created: $env:GITHUB_WORKSPACE\cache-vcpkg-downloads -> C:\vcpkg\downloads"
                   
          
      #--only-downloads --dry-run for testing or precreating cache
      - name: Install Boost via vcpkg
        run: |
          Write-Host "Installing Boost via vcpkg..."
          #vcpkg install
          vcpkg install boost
          #to use boost cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_INSTALLATION_ROOT\scripts\buildsystems\vcpkg.cmake"
        shell: pwsh
        
      - name: Check if vcpkg.cmake exists
        run: |
          $vcpkgCMakePath = "$env:VCPKG_INSTALLATION_ROOT\scripts\buildsystems\vcpkg.cmake"
          if (Test-Path $vcpkgCMakePath) {
            Write-Host "vcpkg.cmake found: $vcpkgCMakePath"
            Add-Content -Path $env:GITHUB_ENV -Value "CMAKE_TOOLCHAIN_FILE=$vcpkgCMakePath"
          }
          else {
            Write-Error "vcpkg.cmake not found in: $vcpkgCMakePath"
          }
        shell: pwsh

        
      - name: Install LLVM MinGW Compiler Toolchain
        run: |
          # load LLVM MinGW Toolchain
          Invoke-WebRequest -Uri "https://github.com/mstorsjo/llvm-mingw/releases/download/20240619/llvm-mingw-20240619-ucrt-x86_64.zip" -OutFile llvm-mingw.zip
          # Extract to C:\tools\llvm-mingw
          Expand-Archive llvm-mingw.zip -DestinationPath C:\tools\llvm-mingw -Force
          # Add Toolchain to PATH envirment variable
          $llvmPath = "C:\tools\llvm-mingw\llvm-mingw-20240619-ucrt-x86_64\bin\"
          if (Test-Path $llvmPath) {
            Write-Host "llvm path: $llvmPath"
          } else {
            Write-Error "llvm path _NOT_ found: $llvmPath"
          }
          Add-Content -Path $env:GITHUB_PATH -Value "$llvmPath"
        shell: pwsh
        
      # === packaging_krita-deps-management ===
      - name: Get commit hash for packaging_krita-deps-management
        id: packaging_krita-deps-management_hash
        shell: pwsh
        run: |
          # Retrieve the latest commit hash from the packaging/krita-deps-management repository
          $commitLine = git ls-remote https://invent.kde.org/packaging/krita-deps-management.git $env:EFFECTIVE_DEPS_REPO_BRANCH_NAME | Select-Object -First 1
          $commit = $commitLine.Split(" ")[0]
          echo "commit=$commit" >> $env:GITHUB_OUTPUT

      - name: Cache packaging_krita-deps-management repository
        id: cache_packaging_krita-deps-management
        uses: actions/cache@v3
        with:
          path: krita-deps-management
          key: packaging_krita-deps-management-${{ env.EFFECTIVE_DEPS_REPO_BRANCH_NAME }}-${{ steps.packaging_krita-deps-management_hash.outputs.commit }}

      - name: Clone packaging_krita-deps-management repository
        if: steps.cache_packaging_krita-deps-management.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Clone the repository if no cache is found
          git clone https://invent.kde.org/packaging/krita-deps-management.git -b $env:EFFECTIVE_DEPS_REPO_BRANCH_NAME --depth=1

      - name: Update packaging_krita-deps-management repository if outdated
        if: steps.cache_packaging_krita-deps-management.outputs.cache-hit == 'true'
        shell: pwsh
        run: |
          # Update the cached repository if the local commit differs from the remote
          Set-Location -Path krita-deps-management
          $local_commit = (git rev-parse HEAD).Trim()
          $remote_commit = "${{ steps.packaging_krita-deps-management_hash.outputs.commit }}"
          if ($local_commit -ne $remote_commit) {
              Write-Output "Cached repository outdated. Fetching updates..."
              git fetch --depth=1 origin $env:EFFECTIVE_DEPS_REPO_BRANCH_NAME
              git reset --hard FETCH_HEAD
          } else {
              Write-Output "Repository is up-to-date."
          }

      # === packaging_krita-ci-utilities (located under krita-deps-management/ci-utilities) ===
      - name: Get commit hash for packaging_krita-ci-utilities
        id: packaging_krita-ci-utilities_hash
        shell: pwsh
        run: |
          # Retrieve the latest commit hash from the packaging/krita-ci-utilities repository
          $commitLine = git ls-remote https://invent.kde.org/packaging/krita-ci-utilities.git HEAD | Select-Object -First 1
          $commit = $commitLine.Split(" ")[0]
          echo "commit=$commit" >> $env:GITHUB_OUTPUT

      - name: Cache packaging_krita-ci-utilities repository
        id: cache_packaging_krita-ci-utilities
        uses: actions/cache@v3
        with:
          path: krita-deps-management/ci-utilities
          key: packaging_krita-ci-utilities-${{ steps.packaging_krita-ci-utilities_hash.outputs.commit }}

      - name: Clone packaging_krita-ci-utilities repository
        if: steps.cache_packaging_krita-ci-utilities.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Clone the repository if no cache is found
          git clone https://invent.kde.org/packaging/krita-ci-utilities.git krita-deps-management/ci-utilities --depth=1

      - name: Update packaging_krita-ci-utilities repository if outdated
        if: steps.cache_packaging_krita-ci-utilities.outputs.cache-hit == 'true'
        shell: pwsh
        run: |
          # Update the cached repository if the local commit differs from the remote
          Set-Location -Path krita-deps-management/ci-utilities
          $local_commit = (git rev-parse HEAD).Trim()
          $remote_commit = "${{ steps.packaging_krita-ci-utilities_hash.outputs.commit }}"
          if ($local_commit -ne $remote_commit) {
              Write-Output "Cached repository outdated. Fetching updates..."
              git fetch --depth=1 origin
              git reset --hard FETCH_HEAD
          } else {
              Write-Output "Repository is up-to-date."
          }

      # === sysadmin_ci-notary-service ===
      - name: Get commit hash for sysadmin_ci-notary-service
        id: sysadmin_ci-notary-service_hash
        shell: pwsh
        run: |
          # Retrieve the latest commit hash from the sysadmin/ci-notary-service repository
          $commitLine = git ls-remote https://invent.kde.org/sysadmin/ci-notary-service.git HEAD | Select-Object -First 1
          $commit = $commitLine.Split(" ")[0]
          echo "commit=$commit" >> $env:GITHUB_OUTPUT

      - name: Cache sysadmin_ci-notary-service repository
        id: cache_sysadmin_ci-notary-service
        uses: actions/cache@v3
        with:
          path: ci-notary-service
          key: sysadmin_ci-notary-service-${{ steps.sysadmin_ci-notary-service_hash.outputs.commit }}

      - name: Clone sysadmin_ci-notary-service repository
        if: steps.cache_sysadmin_ci-notary-service.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Clone the repository if no cache is found
          git clone https://invent.kde.org/sysadmin/ci-notary-service.git --depth=1

      - name: Update sysadmin_ci-notary-service repository if outdated
        if: steps.cache_sysadmin_ci-notary-service.outputs.cache-hit == 'true'
        shell: pwsh
        run: |
          # Update the cached repository if the local commit differs from the remote
          Set-Location -Path ci-notary-service
          $local_commit = (git rev-parse HEAD).Trim()
          $remote_commit = "${{ steps.sysadmin_ci-notary-service_hash.outputs.commit }}"
          if ($local_commit -ne $remote_commit) {
              Write-Output "Cached repository outdated. Fetching updates..."
              git fetch --depth=1 origin
              git reset --hard FETCH_HEAD
          } else {
              Write-Output "Repository is up-to-date."
          }

      # === sysadmin_upstream-ci-utilities ===
      - name: Get commit hash for sysadmin_upstream-ci-utilities
        id: sysadmin_upstream-ci-utilities_hash
        shell: pwsh
        run: |
          # Retrieve the latest commit hash from the sysadmin/ci-utilities repository (upstream)
          $commitLine = git ls-remote https://invent.kde.org/sysadmin/ci-utilities.git HEAD | Select-Object -First 1
          $commit = $commitLine.Split(" ")[0]
          echo "commit=$commit" >> $env:GITHUB_OUTPUT

      - name: Cache sysadmin_upstream-ci-utilities repository
        id: cache_sysadmin_upstream-ci-utilities
        uses: actions/cache@v3
        with:
          path: upstream-ci-utilities
          key: sysadmin_upstream-ci-utilities-${{ steps.sysadmin_upstream-ci-utilities_hash.outputs.commit }}

      - name: Clone sysadmin_upstream-ci-utilities repository
        if: steps.cache_sysadmin_upstream-ci-utilities.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Clone the repository if no cache is found
          git clone https://invent.kde.org/sysadmin/ci-utilities.git upstream-ci-utilities --depth=1

      - name: Update sysadmin_upstream-ci-utilities repository if outdated
        if: steps.cache_sysadmin_upstream-ci-utilities.outputs.cache-hit == 'true'
        shell: pwsh
        run: |
          # Update the cached repository if the local commit differs from the remote
          Set-Location -Path upstream-ci-utilities
          $local_commit = (git rev-parse HEAD).Trim()
          $remote_commit = "${{ steps.sysadmin_upstream-ci-utilities_hash.outputs.commit }}"
          if ($local_commit -ne $remote_commit) {
              Write-Output "Cached repository outdated. Fetching updates..."
              git fetch --depth=1 origin
              git reset --hard FETCH_HEAD
          } else {
              Write-Output "Repository is up-to-date."
          }

      - name: Set up Python virtual environment
        run: |
          python -m venv venv --upgrade-deps
          .\venv\Scripts\Activate.ps1
        shell: pwsh
        
      - name: Install Python Dependencies
        run: |
          .\venv\Scripts\Activate.ps1
          pip install -r krita-deps-management/requirements.txt
          pip install -r ci-notary-service/requirements.txt
          pip install packaging
          pip install --upgrade "sip>=4.19.13"
          pip install --upgrade "PyQt5>= 5.6.0"
          pip install wheel
        shell: pwsh

      #- name: Configure Git safe directory #dont think its needed for github autobuild 
      #  run: git config --global --add safe.directory $env:CI_PROJECT_DIR
      #  shell: pwsh

      - name: Replace Branch in Seed File
        run: |
          .\venv\Scripts\Activate.ps1
          python -u krita-deps-management/tools/replace-branch-in-seed-file.py krita-deps-management/latest/krita-deps.yml -p -o branch-corrected-deps.yml -d $env:EFFECTIVE_DEPS_BRANCH_NAME
        shell: pwsh

      - name: Generate Deps File
        run: |
          .\venv\Scripts\Activate.ps1
          python -u krita-deps-management/tools/generate-deps-file.py -s branch-corrected-deps.yml -o .kde-ci.yml
        shell: pwsh

      - name: List .\venv\Lib\site-packages\
        run: dir .\venv\Lib\site-packages\
        shell: pwsh
